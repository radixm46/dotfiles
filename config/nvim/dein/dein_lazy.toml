[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('nvim')"
on_event = 'InsertEnter'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#autocomplete_delay = 50
    let g:deoplete#enable_camel_case = 0
    let g:deoplete#enable_ignore_case = 0
    let g:deoplete#enable_refresh_always = 0
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#enable_buffer_path = 1
    let g:deoplete#max_list = 100
    "completion with tab key
    inoremap <expr><tab> pumvisible() ? "\n<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \ "\<plug>(neosnippet_expand_or_jump)" : "\<tab>"
    '''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
if = "has('nvim')"
on_event = 'InsertEnter'
hook_add = '''
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
      endif

    " snippets directrory
    let g:neosnippet#snippets_directory = '$HOME/.config/nvim/snippets/'
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
    nmap <F8> :TagbarToggle<CR>
    " let g:tagbar_iconchars = ['▸', '▾']
    let g:tagbar_iconchars = ['⬥', '⬦']
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
if = "has('nvim')"
hook_add = '''
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_source = '''
let g:quickrun_config = {
\   '_' : {
\       'runner' : 'vimproc',
\       'runner/vimproc/updatetime' : 40,
\       'outputter' : 'error',
\       'outputter/error/success' : 'buffer',
\       'outputter/error/error' : 'quickfix',
\       'outputter/buffer/split' : ':botright 8sp',
\   },
\}
'''
# \       "outputter/buffer/close_on_empty" : 1,

[[plugins]]
repo = 'zchee/deoplete-jedi'
if = "has('nvim')"
depends = ['deoplete.nvim']
on_event = 'InsertEnter'
on_ft = 'python'
#requires jedi (install by 'pip install jedi')
#jedi, Neovim, neovim-python client
##ここから有無をチェックしてインストールまでやりたい

[[plugins]]
repo = "vim-python/python-syntax"
on_ft = 'python'
hook_add = '''
    " let g:python_version_2  "Python 2 mode:0
    " let b:python_version_2  "Python 2 mode (buffer local):0
    " let g:python_highlight_builtins = 0
    " Highlight builtin functions and objects 0
    " let g:python_highlight_builtin_objs = 0
    " Highlight builtin objects only 0
    " let g:python_highlight_builtin_types = 0
    " Highlight builtin types only 0
    " let g:python_highlight_builtin_funcs = 0
    " Highlight builtin functions only 0
    " let g:python_highlight_builtin_funcs_kwarg = 0
    " Highlight builtin functions when used as kwarg 1
    " let g:python_highlight_exceptions = 0
    " Highlight standard exceptions 0
    " let g:python_highlight_string_formatting = 0
    " Highlight % string formatting 0
    " let g:python_highlight_string_format = 0
    " Highlight syntax of str.format syntax 0
    " let g:python_highlight_string_templates = 0
    " Highlight syntax of string.Template 0
    " let g:python_highlight_indent_errors = 0
    " Highlight indentation errors 0
    " let g:python_highlight_space_errors = 0
    " Highlight trailing spaces 0
    " let g:python_highlight_doctests = 0
    " Highlight doc-tests 0
    " let g:python_highlight_class_vars = 0
    " Highlight class variables self and cls 0
    " let g:python_highlight_operators = 0
    " Highlight all operators 0

    let g:python_highlight_all = 1
    " Enable all highlight options above, except for previously set. 0
    let g:python_highlight_file_headers_as_comments = 1
    " Highlight shebang and coding headers as comments 0
    let g:python_slow_sync = 0
    " Disable for slow machines 1
'''
#[[plugins]]
#repo = 'kevinw/pyflakes-vim'
#on_ft = 'python'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

#[[plugins]]
#repo = 'lambdalisue/vim-django-support'
#on_ft = ['python', 'djangohtml']

#[[plugins]]
#repo = 'Vimjas/vim-python-pep8-indent'
#on_ft = ['python']

# [[plugins]]
# repo = 'lambdalisue/vim-pyenv'
# on_ft = ['python']

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh', 'sh']
