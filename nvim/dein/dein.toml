[[plugins]]
repo = 'Shougo/dein.vim'

# patch for colorscheme
# [[plugins]]
# repo = 'delphinus/lightline-delphinus'

 [[plugins]]
 repo = 'itchyny/lightline.vim'
 hook_add = '''
    let g:lightline = {
     \   'colorscheme': 'powerline',
     \   'mode_map': {'c': 'NORMAL'},
     \   'separator': { 'left': '▙▞▚▖', 'right': '▝▘▗▞▜' },
     \   'subseparator': { 'left': '▝▚▖', 'right': '▙▜' },
     \}
    let g:lightline.active = {
    \       'left': [ [ 'mode', 'paste' ],
    \                 [ 'readonly', 'fugitive', 'venv', 'filename', 'modified'] ],
    \       'right': [['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok'],
    \                 ['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype']]
    \ }
    let g:lightline.component_function = {
    \        'fugitive': 'LightlineFugitive',
    \        'venv': 'virtualenv#statusline',
    \ }
    let g:lightline.component_expand = {
    \    'linter_checking': 'lightline#ale#checking',
    \    'linter_warnings': 'lightline#ale#warnings',
    \    'linter_errors': 'lightline#ale#errors',
    \    'linter_ok': 'lightline#ale#ok',
    \ }
    let g:lightline.component_type = {
    \     'linter_checking': 'left',
    \     'linter_warnings': 'warning',
    \     'linter_errors': 'error',
    \     'linter_ok': 'left',
    \ }

    " let g:lightline[ 'colorscheme' ] = 'oceanicnext'
    " let g:lightline[ 'colorscheme' ] = 'gruvbox'
      let g:lightline[ 'colorscheme' ] = 'solarized'

    function! LightlineFugitive()
        if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
            return fugitive#head()
        else
            return ''
        endif
    endfunction
     '''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
    let g:lightline#ale#indicator_checking = "⟳ "
    let g:lightline#ale#indicator_warnings = "⚠ "
    let g:lightline#ale#indicator_errors = "✗ "
    let g:lightline#ale#indicator_ok = "✓ "
      '''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    "let g:ale_statusline_format = ['✗ %d', '⚠ %d', '✓ ok']
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_sign_column_always = 1
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
    let g:ale_sign_error = '✗'
    "let g:ale_sign_warning = '⚠'
    let g:ale_fix_on_save = 1
    let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \   'python': ['black', 'autopep8'],
    \   'go': ['gofmt'],
    \}
    let g:ale_linters = {
    \   'python': ['flake8', 'mypy'],
    \   'rust': ['rls'],
    \   'javascript': ['eslint'],
    \   'go': ['golint'],
    \}
    " let g:ale_python_flake8_executable = g:python3_host_prog
    " let g:ale_python_flake8_options = '-m flake8'
    " let g:ale_python_autopep8_executable = g:python3_host_prog
    " let g:ale_python_autopep8_options = '-m autopep8'
    " let g:ale_python_isort_executable = g:python3_host_prog
    " let g:ale_python_isort_options = '-m isort'
    " let g:ale_python_black_executable = g:python3_host_prog
    " let g:ale_python_black_options = '-m black'
    let g:ale_python_flake8_options = '--max-line-length=99 --ignore=E203,W503,W504'
    let g:ale_python_autopep8_options = '--aggressive --max-line-length 99'
    let g:ale_python_black_options = '--ignore-missing-imports'

    nmap <silent> <C-j> <Plug>(ale_previous_wrap)
    nmap <silent> <C-k> <Plug>(ale_next_wrap)
    '''

[[plugins]]
repo = 'plytophogy/vim-virtualenv'
on_ft = 'python'
hook_add = '''
    let g:virtualenv_directory = '$HOME/venv_py'
    let g:virtualenv_auto_activate = 1
    let g:virtualenv_stl_format = 'env: %n'
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
        nmap <F9> :Gstatus<CR>
'''

# [[plugins]]
# repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nmap <F7> :NERDTreeToggle<CR>
'''

# [[plugins]]
# repo = 'morhetz/gruvbox'
# hook_post_source = '''
#     syntax enable
#     set background=dark
#     '''
# hook_add = '''
#     colorscheme gruvbox
#     '''

[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
    set background=dark
    colorscheme solarized
    '''

# [[plugins]]
# repo = 'sickill/vim-monokai'
# hook_post_source = '''
#     colorscheme monokai
#     '''

# [[plugins]]
# repo = 'mhartington/oceanic-next'
# hook_post_source = '''
#     set background=dark
#     if (has("termguicolors"))
#         set termguicolors
#     endif
# '''
# hook_add = '''
#     colorscheme OceanicNext
# '''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
" vim-indent-guides
" Vim 起動時 vim-indent-guides を自動起動
let g:indent_guides_enable_on_vim_startup=1
" Disable on help anda NerdTree
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
" ガイドをスタートするインデントの量
let g:indent_guides_start_level=2
" 自動カラー無効
let g:indent_guides_auto_colors=0
" 奇数番目のインデントの色 -> solarized base02
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#073642 ctermbg=0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=236
" 偶数番目のインデントの色 -> solarized base01
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#586e75 ctermbg=8
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237
" ガイドの幅
let g:indent_guides_guide_size = 1
'''

# [[plugins]]
# repo = 'Yggdroot/indentLine'
# hook_add = '''
#     let g:indentLine_setColors = 0
#     let g:indentLine_char = '┆'
#     '''

##非同期処理をするために必要
##要ビルド
[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'
hook_post_update = '''
  if dein#util#_is_windows()
      let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
      let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
      let cmd = 'gmake'
  else
      let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'jiangmiao/auto-pairs'
hook_add = '''
    let g:AutoPairsFlyMode = 0
    let g:AutoPairsShortcutBackInsert = '<M-b>'
    '''

[[plugins]]
if = "has('nvim')"
repo = 'Shougo/neosnippet-snippets'
